
//import necessary pakages :
 
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.sql._
import org.apache.spark.SparkConf
import org.apache.spark.sql.Column
----------------------------------------------------------------------------------------------------
//setAppName & setMaster :

val conf=new SparkConf().
setAppName("Total revenue").
setMaster("local")
----------------------------------------------------------------------------------------------------
//create SparkConf & SparkContext :

val sc= new SparkContext(conf)
val sqlContext=new SQLContext(sc)
sqlContext.setConf("spark.sql.shuffle.partitions","2")
import sqlContext.implicits._
----------------------------------------------------------------------------------------------------
// create case class and convert to dframe :
 
1)
case class Product(products_id: Int, product_category_id: Int,product_name: String,product_description: String,product_price: Float,product_image: String)


val product_df = sc.textFile("C:\\Users\\SAGAR\\Desktop\\data\\Products.txt").map(_.split(";")).map(p => Product(p(0).trim.toInt, p(1).trim.toInt, p(2), p(3), p(4).trim.toFloat, p(5))).toDF()


//create registerTempTable :
product_df.registerTempTable("product")

-----------------------------------------------------------------------------------------------
2)
case class order_items(order_item_id: Int,order_item_order_id: Int,order_item_product_id: String,order_item_quantity: Int,order_item_subtotal: Float,order_item_product_price: Float)


val order_items_df = sc.textFile("C:\\Users\\SAGAR\\Desktop\\data\\Order_Items.txt").map(_.split(",")).map(p => order_items(p(0).trim.toInt, p(1).trim.toInt, p(2), p(3).trim.toInt, p(4).trim.toFloat, p(5).trim.toFloat)).toDF()


//create registerTempTable :
order_items_df.registerTempTable("order_items")

-----------------------------------------------------------------------------------------------
3)
//for convert column into date datatype :

val date = orders.withColumn("order_date", to_date($"order_date"))


case class orders(order_id: Int, order_date:Date,order_customer_id: Int,order_status:String)


val orders_df=sc.textFile(“C:\Users\SAGAR\Desktop\data\Orders.txt”)
                          .map(_.split(”,”))
                          .map(p=>orders(p(0).trim.toInt,
                      p(1), p(2).trim.toInt,
                     p(3)).toDF()

					 
//create registerTempTable :					 
orders_df.registerTempTable(“orders”)

-----------------------------------------------------------------------------------------------
4)
case class customers(customer_id: Int,customer_fname:String, customer_lname:String,customer_email:String,customer_password:String,customer_street:String,customer_city:String,customer_state:String,customer_zipcode:String)


val customers_df=sc.textFile(“C:\Users\SAGAR\Desktop\data\Customers.txt”)
                          .map(_.split(”;”))
                          .map(p=>customers(p(0).trim.toInt,
						   p(1), p(2),p(3),p(4),p(5),p(6),p(7)
						   p(8)).toDF()
						   

//create registerTempTable :						   
customers_df.registerTempTable("customers")

----------------------------------------------------------------------------------------------------
//join orders & order_items	:

val orderjoin = orders.join(order_items,orders("order_id") === order_items("order_item_order_id"))


//display join tables : 
display(orderjoin)

----------------------------------------------------------------------------------------------------
//Assignments :
1)Total sales for each date :

orderjoin.groupBy("order_date").sum("order_item_subtotal").sort("order_date").rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output1.txt")

----------------------------------------------------------------------------------------------------
2)Total sales for each month :

orderjoin.groupBy("order_date").sum("order_item_subtotal").sort("order_month").rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output2.txt")
	   
----------------------------------------------------------------------------------------------------	   
3)Average sales for each date :

orderjoin.groupBy("order_date").agg(sum("order_item_subtotal")).sort("order_date").rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output3.txt")

----------------------------------------------------------------------------------------------------4)Average sales for each month :

orderjoin.groupBy("order_date").agg(sum("order_item_subtotal")).sort("order_month").rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output4.txt")
						   
----------------------------------------------------------------------------------------------------
5)Name of Month having highest sale :

orderjoin.groupBy("order_date").max(sum("order_item_product_price")).sort("order_month").rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output5.txt")

----------------------------------------------------------------------------------------------------
6)Top 10 revenue generating products :

//join products and order_items table :

val productsjoin = products.join(order_items,products("product_id") === order_items("order_item_product_id"))


//display join tables : 
display(productsjoin)
 
productsjoin.groupBy("order_item_product_id").TOP 10("product_name").sum("order_item_quantity").orderBy(sum("order_item_quantity")desc.rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output6.txt")

----------------------------------------------------------------------------------------------------
7)Top 3 purchased customers for each day/month :

//join orders and customers table :

val customersjoin = orders.join(customers,orders("order_customer_id") === customers("customer_id"))

//display join table :
display(customersjoin)

customersjoin.groupBy("order_date").TOP 3("customer_fname").sum("order_customer_id").orderBy(sum("customer_id")desc.rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output7.txt")

----------------------------------------------------------------------------------------------------
8)Most sold products for each day/month : 


productsjoin.groupBy("order_date,product_name").sum("order_item_quantity").orderBy(sum("order_item_quantity")desc.rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output8.txt")


----------------------------------------------------------------------------------------------------

9)Count of distinct Customer, group by State  (use customer table) :
 
customers.groupBy("customer_state").count(distinct("customer_fname").rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output9.txt")

 
----------------------------------------------------------------------------------------------------
10) Most popular product category :

productsjoin.groupBy("product_category_id,product_name").sum("order_item_quantity").orderBy(sum("order_item_quantity")desc.rdd.saveAsTextFile("C:\Users\SAGAR\Desktop\data\output10.txt")


----------------------------------------------------------------------------------------------------
